<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: profile.proto

namespace Pakutoma\Phreakscope\protobuf\profiles;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>perftools.profiles.Label</code>
 */
class Label extends \Google\Protobuf\Internal\Message
{
    /**
     * Index into string table. An annotation for a sample (e.g.
     * "allocation_size") with an associated value.
     * Keys with "pprof::" prefix are reserved for internal use by pprof.
     *
     * Generated from protobuf field <code>int64 key = 1;</code>
     */
    protected $key = 0;
    /**
     * At most one of the following must be present
     *
     * Generated from protobuf field <code>int64 str = 2;</code>
     */
    protected $str = 0;
    /**
     * Generated from protobuf field <code>int64 num = 3;</code>
     */
    protected $num = 0;
    /**
     * Should only be present when num is present.
     * Specifies the units of num.
     * Use arbitrary string (for example, "requests") as a custom count unit.
     * If no unit is specified, consumer may apply heuristic to deduce the unit.
     * Consumers may also  interpret units like "bytes" and "kilobytes" as memory
     * units and units like "seconds" and "nanoseconds" as time units,
     * and apply appropriate unit conversions to these.
     *
     * Generated from protobuf field <code>int64 num_unit = 4;</code>
     */
    protected $num_unit = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $key
     *           Index into string table. An annotation for a sample (e.g.
     *           "allocation_size") with an associated value.
     *           Keys with "pprof::" prefix are reserved for internal use by pprof.
     *     @type int|string $str
     *           At most one of the following must be present
     *     @type int|string $num
     *     @type int|string $num_unit
     *           Should only be present when num is present.
     *           Specifies the units of num.
     *           Use arbitrary string (for example, "requests") as a custom count unit.
     *           If no unit is specified, consumer may apply heuristic to deduce the unit.
     *           Consumers may also  interpret units like "bytes" and "kilobytes" as memory
     *           units and units like "seconds" and "nanoseconds" as time units,
     *           and apply appropriate unit conversions to these.
     * }
     */
    public function __construct($data = NULL) {
        \Pakutoma\Phreakscope\protobuf\metadata\Profile::initOnce();
        parent::__construct($data);
    }

    /**
     * Index into string table. An annotation for a sample (e.g.
     * "allocation_size") with an associated value.
     * Keys with "pprof::" prefix are reserved for internal use by pprof.
     *
     * Generated from protobuf field <code>int64 key = 1;</code>
     * @return int|string
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * Index into string table. An annotation for a sample (e.g.
     * "allocation_size") with an associated value.
     * Keys with "pprof::" prefix are reserved for internal use by pprof.
     *
     * Generated from protobuf field <code>int64 key = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setKey($var)
    {
        GPBUtil::checkInt64($var);
        $this->key = $var;

        return $this;
    }

    /**
     * At most one of the following must be present
     *
     * Generated from protobuf field <code>int64 str = 2;</code>
     * @return int|string
     */
    public function getStr()
    {
        return $this->str;
    }

    /**
     * At most one of the following must be present
     *
     * Generated from protobuf field <code>int64 str = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStr($var)
    {
        GPBUtil::checkInt64($var);
        $this->str = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>int64 num = 3;</code>
     * @return int|string
     */
    public function getNum()
    {
        return $this->num;
    }

    /**
     * Generated from protobuf field <code>int64 num = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setNum($var)
    {
        GPBUtil::checkInt64($var);
        $this->num = $var;

        return $this;
    }

    /**
     * Should only be present when num is present.
     * Specifies the units of num.
     * Use arbitrary string (for example, "requests") as a custom count unit.
     * If no unit is specified, consumer may apply heuristic to deduce the unit.
     * Consumers may also  interpret units like "bytes" and "kilobytes" as memory
     * units and units like "seconds" and "nanoseconds" as time units,
     * and apply appropriate unit conversions to these.
     *
     * Generated from protobuf field <code>int64 num_unit = 4;</code>
     * @return int|string
     */
    public function getNumUnit()
    {
        return $this->num_unit;
    }

    /**
     * Should only be present when num is present.
     * Specifies the units of num.
     * Use arbitrary string (for example, "requests") as a custom count unit.
     * If no unit is specified, consumer may apply heuristic to deduce the unit.
     * Consumers may also  interpret units like "bytes" and "kilobytes" as memory
     * units and units like "seconds" and "nanoseconds" as time units,
     * and apply appropriate unit conversions to these.
     *
     * Generated from protobuf field <code>int64 num_unit = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setNumUnit($var)
    {
        GPBUtil::checkInt64($var);
        $this->num_unit = $var;

        return $this;
    }

}

