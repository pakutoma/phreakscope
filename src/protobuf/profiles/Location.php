<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: profile.proto

namespace Pakutoma\Phreakscope\protobuf\profiles;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Describes function and line table debug information.
 *
 * Generated from protobuf message <code>perftools.profiles.Location</code>
 */
class Location extends \Google\Protobuf\Internal\Message
{
    /**
     * Unique nonzero id for the location.  A profile could use
     * instruction addresses or any integer sequence as ids.
     *
     * Generated from protobuf field <code>uint64 id = 1;</code>
     */
    protected $id = 0;
    /**
     * The id of the corresponding profile.Mapping for this location.
     * It can be unset if the mapping is unknown or not applicable for
     * this profile type.
     *
     * Generated from protobuf field <code>uint64 mapping_id = 2;</code>
     */
    protected $mapping_id = 0;
    /**
     * The instruction address for this location, if available.  It
     * should be within [Mapping.memory_start...Mapping.memory_limit]
     * for the corresponding mapping. A non-leaf address may be in the
     * middle of a call instruction. It is up to display tools to find
     * the beginning of the instruction if necessary.
     *
     * Generated from protobuf field <code>uint64 address = 3;</code>
     */
    protected $address = 0;
    /**
     * Multiple line indicates this location has inlined functions,
     * where the last entry represents the caller into which the
     * preceding entries were inlined.
     * E.g., if memcpy() is inlined into printf:
     *    line[0].function_name == "memcpy"
     *    line[1].function_name == "printf"
     *
     * Generated from protobuf field <code>repeated .perftools.profiles.Line line = 4;</code>
     */
    private $line;
    /**
     * Provides an indication that multiple symbols map to this location's
     * address, for example due to identical code folding by the linker. In that
     * case the line information above represents one of the multiple
     * symbols. This field must be recomputed when the symbolization state of the
     * profile changes.
     *
     * Generated from protobuf field <code>bool is_folded = 5;</code>
     */
    protected $is_folded = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $id
     *           Unique nonzero id for the location.  A profile could use
     *           instruction addresses or any integer sequence as ids.
     *     @type int|string $mapping_id
     *           The id of the corresponding profile.Mapping for this location.
     *           It can be unset if the mapping is unknown or not applicable for
     *           this profile type.
     *     @type int|string $address
     *           The instruction address for this location, if available.  It
     *           should be within [Mapping.memory_start...Mapping.memory_limit]
     *           for the corresponding mapping. A non-leaf address may be in the
     *           middle of a call instruction. It is up to display tools to find
     *           the beginning of the instruction if necessary.
     *     @type array<\Pakutoma\Phreakscope\protobuf\profiles\Line>|\Google\Protobuf\Internal\RepeatedField $line
     *           Multiple line indicates this location has inlined functions,
     *           where the last entry represents the caller into which the
     *           preceding entries were inlined.
     *           E.g., if memcpy() is inlined into printf:
     *              line[0].function_name == "memcpy"
     *              line[1].function_name == "printf"
     *     @type bool $is_folded
     *           Provides an indication that multiple symbols map to this location's
     *           address, for example due to identical code folding by the linker. In that
     *           case the line information above represents one of the multiple
     *           symbols. This field must be recomputed when the symbolization state of the
     *           profile changes.
     * }
     */
    public function __construct($data = NULL) {
        \Pakutoma\Phreakscope\protobuf\metadata\Profile::initOnce();
        parent::__construct($data);
    }

    /**
     * Unique nonzero id for the location.  A profile could use
     * instruction addresses or any integer sequence as ids.
     *
     * Generated from protobuf field <code>uint64 id = 1;</code>
     * @return int|string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Unique nonzero id for the location.  A profile could use
     * instruction addresses or any integer sequence as ids.
     *
     * Generated from protobuf field <code>uint64 id = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkUint64($var);
        $this->id = $var;

        return $this;
    }

    /**
     * The id of the corresponding profile.Mapping for this location.
     * It can be unset if the mapping is unknown or not applicable for
     * this profile type.
     *
     * Generated from protobuf field <code>uint64 mapping_id = 2;</code>
     * @return int|string
     */
    public function getMappingId()
    {
        return $this->mapping_id;
    }

    /**
     * The id of the corresponding profile.Mapping for this location.
     * It can be unset if the mapping is unknown or not applicable for
     * this profile type.
     *
     * Generated from protobuf field <code>uint64 mapping_id = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMappingId($var)
    {
        GPBUtil::checkUint64($var);
        $this->mapping_id = $var;

        return $this;
    }

    /**
     * The instruction address for this location, if available.  It
     * should be within [Mapping.memory_start...Mapping.memory_limit]
     * for the corresponding mapping. A non-leaf address may be in the
     * middle of a call instruction. It is up to display tools to find
     * the beginning of the instruction if necessary.
     *
     * Generated from protobuf field <code>uint64 address = 3;</code>
     * @return int|string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * The instruction address for this location, if available.  It
     * should be within [Mapping.memory_start...Mapping.memory_limit]
     * for the corresponding mapping. A non-leaf address may be in the
     * middle of a call instruction. It is up to display tools to find
     * the beginning of the instruction if necessary.
     *
     * Generated from protobuf field <code>uint64 address = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAddress($var)
    {
        GPBUtil::checkUint64($var);
        $this->address = $var;

        return $this;
    }

    /**
     * Multiple line indicates this location has inlined functions,
     * where the last entry represents the caller into which the
     * preceding entries were inlined.
     * E.g., if memcpy() is inlined into printf:
     *    line[0].function_name == "memcpy"
     *    line[1].function_name == "printf"
     *
     * Generated from protobuf field <code>repeated .perftools.profiles.Line line = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getLine()
    {
        return $this->line;
    }

    /**
     * Multiple line indicates this location has inlined functions,
     * where the last entry represents the caller into which the
     * preceding entries were inlined.
     * E.g., if memcpy() is inlined into printf:
     *    line[0].function_name == "memcpy"
     *    line[1].function_name == "printf"
     *
     * Generated from protobuf field <code>repeated .perftools.profiles.Line line = 4;</code>
     * @param array<\Pakutoma\Phreakscope\protobuf\profiles\Line>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setLine($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Pakutoma\Phreakscope\protobuf\profiles\Line::class);
        $this->line = $arr;

        return $this;
    }

    /**
     * Provides an indication that multiple symbols map to this location's
     * address, for example due to identical code folding by the linker. In that
     * case the line information above represents one of the multiple
     * symbols. This field must be recomputed when the symbolization state of the
     * profile changes.
     *
     * Generated from protobuf field <code>bool is_folded = 5;</code>
     * @return bool
     */
    public function getIsFolded()
    {
        return $this->is_folded;
    }

    /**
     * Provides an indication that multiple symbols map to this location's
     * address, for example due to identical code folding by the linker. In that
     * case the line information above represents one of the multiple
     * symbols. This field must be recomputed when the symbolization state of the
     * profile changes.
     *
     * Generated from protobuf field <code>bool is_folded = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsFolded($var)
    {
        GPBUtil::checkBool($var);
        $this->is_folded = $var;

        return $this;
    }

}

